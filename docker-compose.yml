services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017" #호스트 : 도커 컨테이너 안 몽고디비
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - pik-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app-container
    expose:
      - "8001"
    depends_on:
      - mongodb
    environment:
      MONGO_URI: mongodb+srv://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_CLUSTER}t/${MONGO_DB}?retryWrites=true&w=majority
    networks:
      - pik-network

  pik-nlp:
    image: huseongyoon/piknlp-server:1.5.0
    container_name: pik-nlp
    expose:
      - "18000"
    environment:
      - HOST=0.0.0.0
      - PORT=18000
      - WORKERS=4
      - DEVICE=${DEVICE:-cpu} # 'cuda' 또는 'cpu'
      - API_KEY=${NLP_API_KEY}
      - ENV=${NLP_ENV}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: uv run uvicorn app.main:app --host 0.0.0.0 --port 18000 --workers 4
    networks:
      - pik-network
  pik-react-front:
    image: eunzs/pik-react-front:latest
    platform: linux/amd64
    container_name: pik-react-front
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    networks:
      - pik-network

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro  # SSL 인증서 마운트
    depends_on:
      - app
      - pik-react-front
    networks:
      - pik-network

volumes:
  mongodb_data:

networks:
  pik-network:
    driver: bridge